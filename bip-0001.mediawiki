<pre>
  DIP: 1
  Title: DIP Purpose and Guidelines
  Author: Denis Parfenov <denis.parfenov@pm.me>
  Comments-Summary: No comments yet.
  Comments-URI: https://github.com/damahub/dips/wiki/Comments:DIP-0001
  Status: Replaced
  Type: Process
  Created: 2018-07-12
  Superseded-By: 0
</pre>

==What is a DIP?==

DIP stands for DaMaHub Improvement Proposal. A DIP is a design document providing information to the DaMaHub community, or describing a new feature for DaMaHub or its processes or environment. The DIP should provide a concise technical specification of the feature and a rationale for the feature.

We intend DIPs to be the primary mechanisms for proposing new features, for collecting community input on an issue, and for documenting the design decisions that have gone into DaMaHub. The DIP author is responsible for building consensus within the community and documenting dissenting opinions.

Because the DIPs are maintained as text files in a versioned repository, their revision history is the historical record of the feature proposal.

==DIP Types==

There are three kinds of DIP:

* A Standards Track DIP describes any change that affects most or all DaMaHub implementations, such as a change to the network protocol, a change in block or transaction validity rules, or any change or addition that affects the interoperability of applications using DaMaHub.
* An Informational DIP describes a DaMaHub design issue, or provides general guidelines or information to the DaMaHub community, but does not propose a new feature. Informational DIPs do not necessarily represent a DaMaHub community consensus or recommendation, so users and implementors are free to ignore Informational DIPs or follow their advice.
* A Process DIP describes a process surrounding DaMaHub, or proposes a change to (or an event in) a process. Process DIPs are like Standards Track DIPs but apply to areas other than the DaMaHub protocol itself. They may propose an implementation, but not to DaMaHub's codebase; they often require community consensus; unlike Informational DIPs, they are more than recommendations, and users are typically not free to ignore them. Examples include procedures, guidelines, changes to the decision-making process, and changes to the tools or environment used in DaMaHub development. Any meta-DIP is also considered a Process DIP.

==DIP Work Flow==

The DIP process begins with a new idea for DaMaHub. Each potential DIP must have a champion -- someone who writes the DIP using the style and format described below, shepherds the discussions in the appropriate forums, and attempts to build community consensus around the idea. The DIP champion (a.k.a. Author) should first attempt to ascertain whether the idea is DIP-able. Posting to the [https://gitter.im/DaMaHub/Lobby] mailing list.

Vetting an idea publicly before going as far as writing a DIP is meant to save both the potential author and the wider community time. Many ideas have been brought forward for changing DaMaHub that have been rejected for various reasons. Asking the DaMaHub community first if an idea is original helps prevent too much time being spent on something that is guaranteed to be rejected based on prior discussions (searching the internet does not always do the trick). It also helps to make sure the idea is applicable to the entire community and not just the author. Just because an idea sounds good to the author does not mean it will work for most people in most areas where DaMaHub is used. Small enhancements or patches often don't need standardisation between multiple projects; these don't need a DIP and should be injected into the relevant DaMaHub development work flow with a patch submission to the applicable DaMaHub issue tracker.

Once the champion has asked the DaMaHub community as to whether an idea has any chance of acceptance, a draft DIP should be presented to the [https://gitter.im/DaMaHub/Lobby]. This gives the author a chance to flesh out the draft DIP to make it properly formatted, of high quality, and to address additional concerns about the proposal. Following a discussion, the proposal should be sent to the DaMaHub-dev list and the DIP editor with the draft DIP. This draft must be written in BDD style as described below, else it will be sent back without further regard until proper formatting rules are followed.

DIP authors are responsible for collecting community feedback on both the initial idea and the DIP before submitting it for review. However, wherever possible, long open-ended discussions on public mailing lists should be avoided. Strategies to keep the discussions efficient include: setting up a separate SIG mailing list for the topic, having the DIP author accept private comments in the early design phases, setting up a wiki page or git repository, etc. DIP authors should use their discretion here.

It is highly recommended that a single DIP contain a single key proposal or new idea. The more focused the DIP, the more successful it tends to be. If in doubt, split your DIP into several well-focused ones.

The DIP editors assign DIP numbers and change their status. Please send all DIP-related email to the DIP editor, which is listed under [[#DIP_Editors|DIP Editors]] below. Also see [[#DIP_Editor_Responsibilities__Workflow|DIP Editor Responsibilities & Workflow]]. The DIP editor reserves the right to reject DIP proposals if they appear too unfocused or too broad.

Authors MUST NOT self assign DIP numbers, but should use an alias such as "bip-johndoe-infinitebitcoins" which includes the author's name/nick and the DIP subject.

If the DIP editor approves, he will assign the DIP a number, label it as Standards Track, Informational, or Process, give it status "Draft", and add it to the DIPs git repository. The DIP editor will not unreasonably deny a DIP. Reasons for denying DIP status include duplication of effort, disregard for formatting rules, being too unfocused or too broad, being technically unsound, not providing proper motivation or addressing backwards compatibility, or not in keeping with the DaMaHub philosophy. For a DIP to be accepted it must meet certain minimum criteria. It must be a clear and complete description of the proposed enhancement. The enhancement must represent a net improvement. The proposed implementation, if applicable, must be solid and must not complicate the protocol unduly.

The DIP author may update the Draft as necessary in the git repository. Updates to drafts may also be submitted by the author as pull requests.

Standards Track DIPs consist of two parts, a design document and a reference implementation. The DIP should be reviewed and accepted before a reference implementation is begun, unless a reference implementation will aid people in studying the DIP. Standards Track DIPs must include an implementation -- in the form of code, a patch, or a URL to same -- before it can be considered Final.

Once a DIP has been accepted, the reference implementation must be completed. When the reference implementation is complete and accepted by the community, the status will be changed to "Final".

A DIP can also be assigned status "Deferred". The DIP author or editor can assign the DIP this status when no progress is being made on the DIP. Once a DIP is deferred, the DIP editor can re-assign it to draft status.

A DIP can also be "Rejected". Perhaps after all is said and done it was not a good idea. It is still important to have a record of this fact.

DIPs can also be superseded by a different DIP, rendering the original obsolete. This is intended for Informational DIPs, where version 2 of an API can replace version 1.

The possible paths of the status of DIPs are as follows:

<img src=bip-0001/process.png></img>

Some Informational and Process DIPs may also have a status of "Active" if they are never meant to be completed. E.g. DIP 1 (this DIP).

==What belongs in a successful DIP?==

Each DIP should have the following parts:

* Preamble -- RFC 822 style headers containing meta-data about the DIP, including the DIP number, a short descriptive title (limited to a maximum of 44 characters), the names, and optionally the contact info for each author, etc.

* Abstract -- a short (~200 word) description of the technical issue being addressed.

* Copyright/public domain -- Each DIP must either be explicitly labelled as placed in the public domain (see this DIP as an example) or licensed under the Open Publication License.

* Specification -- The technical specification should describe the syntax and semantics of any new feature. The specification should be detailed enough to allow competing, interoperable implementations for any of the current DaMaHub platforms (Satoshi, DaMaHubJ, bitcoin-js, libbitcoin).

* Motivation -- The motivation is critical for DIPs that want to change the DaMaHub protocol. It should clearly explain why the existing protocol specification is inadequate to address the problem that the DIP solves. DIP submissions without sufficient motivation may be rejected outright.

* Rationale -- The rationale fleshes out the specification by describing what motivated the design and why particular design decisions were made. It should describe alternate designs that were considered and related work, e.g. how the feature is supported in other languages.

* The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion.

* Backwards Compatibility -- All DIPs that introduce backwards incompatibilities must include a section describing these incompatibilities and their severity. The DIP must explain how the author proposes to deal with these incompatibilities. DIP submissions without a sufficient backwards compatibility treatise may be rejected outright.

* Reference Implementation -- The reference implementation must be completed before any DIP is given status "Final", but it need not be completed before the DIP is accepted. It is better to finish the specification and rationale first and reach consensus on it before writing code.

* The final implementation must include test code and documentation appropriate for the DaMaHub protocol.

==DIP Formats and Templates==

DIPs should be written in mediawiki or markdown format.

===DIP Header Preamble===

Each DIP must begin with an RFC 822 style header preamble. The headers must appear in the following order. Headers marked with "*" are optional and are described below. All other headers are required.

<pre>
  DIP: <DIP number>
  Title: <DIP title>
  Author: <list of authors' real names and optionally, email addrs>
* Discussions-To: <email address>
  Status: <Draft | Active | Accepted | Deferred | Rejected |
           Withdrawn | Final | Superseded>
  Type: <Standards Track | Informational | Process>
  Created: <date created on, in ISO 8601 (yyyy-mm-dd) format>
* Post-History: <dates of postings to bitcoin mailing list>
* Replaces: <DIP number>
* Superseded-By: <DIP number>
* Resolution: <url>
</pre>

The Author header lists the names, and optionally the email addresses of all the authors/owners of the DIP. The format of the Author header value must be

  Random J. User <address@dom.ain>

if the email address is included, and just

  Random J. User

if the address is not given.

If there are multiple authors, each should be on a separate line following RFC 2822 continuation line conventions.

Note: The Resolution header is required for Standards Track DIPs only. It contains a URL that should point to an email message or other web resource where the pronouncement about the DIP is made.

While a DIP is in private discussions (usually during the initial Draft phase), a Discussions-To header will indicate the mailing list or URL where the DIP is being discussed. No Discussions-To header is necessary if the DIP is being discussed privately with the author, or on the bitcoin email mailing lists.

The Type header specifies the type of DIP: Standards Track, Informational, or Process.

The Created header records the date that the DIP was assigned a number, while Post-History is used to record the dates of when new versions of the DIP are posted to bitcoin mailing lists. Both headers should be in yyyy-mm-dd format, e.g. 2001-08-14.

DIPs may have a Requires header, indicating the DIP numbers that this DIP depends on.

DIPs may also have a Superseded-By header indicating that a DIP has been rendered obsolete by a later document; the value is the number of the DIP that replaces the current document. The newer DIP must have a Replaces header containing the number of the DIP that it rendered obsolete.

===Auxiliary Files===

DIPs may include auxiliary files such as diagrams. Image files should be included in a subdirectory for that DIP. Auxiliary files must be named DIP-XXXX-Y.ext, where "XXXX" is the DIP number, "Y" is a serial number (starting at 1), and "ext" is replaced by the actual file extension (e.g. "png").

==Transferring DIP Ownership==

It occasionally becomes necessary to transfer ownership of DIPs to a new champion. In general, we'd like to retain the original author as a co-author of the transferred DIP, but that's really up to the original author. A good reason to transfer ownership is because the original author no longer has the time or interest in updating it or following through with the DIP process, or has fallen off the face of the 'net (i.e. is unreachable or not responding to email). A bad reason to transfer ownership is because you don't agree with the direction of the DIP. We try to build consensus around a DIP, but if that's not possible, you can always submit a competing DIP.

If you are interested in assuming ownership of a DIP, send a message asking to take over, addressed to both the original author and the DIP editor. If the original author doesn't respond to email in a timely manner, the DIP editor will make a unilateral decision (it's not like such decisions can't be reversed :).

==DIP Editors==

The current DIP editor is James Littlejohn who can be contacted at [[mailto:james@aboynejames.co.uk|james@aboynejames.co.uk]].

==DIP Editor Responsibilities & Workflow==

The DIP editor subscribes to the DaMaHub development mailing list. All DIP-related correspondence should be sent (or CC'd) to damahub@pm.me.

For each new DIP that comes in an editor does the following:

* Read the DIP to check if it is ready: sound and complete. The ideas must make technical sense, even if they don't seem likely to be accepted.
* The title should accurately describe the content.
* Edit the DIP for language (spelling, grammar, sentence structure, etc.), markup (for reST DIPs), code style (examples should match DIP 8 & 7).

If the DIP isn't ready, the editor will send it back to the author for revision, with specific instructions.

Once the DIP is ready for the repository it should be submitted as a "pull request" to the [https://github.com/bitcoin/bips bitcoin/bips] repository on GitHub where it may get further feedback.

The DIP editor will:

* Assign a DIP number (almost always just the next available number, but sometimes it's a special/joke number, like 666 or 3141) in the pull request comments.

* Merge the pull request when the author is ready (allowing some time for further peer review).

* List the DIP in [[README.mediawiki]]

* Send email back to the DIP author with next steps (post to bitcoin-dev mailing list).

The DIP editors are intended to fulfill administrative and editorial responsibilities. The DIP editors monitor DIP changes, and correct any structure, grammar, spelling, or markup mistakes we see.

==History==

This document was derived heavily from BIP, which in turn was derived from Python's PEP-0001. In many places text was simply copied and modified. Although the PEP-0001 text was written by Barry Warsaw, Jeremy Hylton, and David Goodger, they are not responsible for its use in the DaMaHub Improvement Process, and should not be bothered with technical questions specific to DaMaHub or the DIP process. Please direct all comments to the DIP editors or the DaMaHub development mailing list.

==Changelog==

